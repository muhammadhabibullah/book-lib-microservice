// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LendingServiceClient is the client API for LendingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LendingServiceClient interface {
	CreateLending(ctx context.Context, in *CreateLendingRequest, opts ...grpc.CallOption) (*Lending, error)
	FetchLending(ctx context.Context, in *FetchLendingRequest, opts ...grpc.CallOption) (*FetchLendingResponse, error)
	RenewLending(ctx context.Context, in *RenewLendingRequest, opts ...grpc.CallOption) (*Lending, error)
	FinishLending(ctx context.Context, in *FinishLendingRequest, opts ...grpc.CallOption) (*Lending, error)
}

type lendingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLendingServiceClient(cc grpc.ClientConnInterface) LendingServiceClient {
	return &lendingServiceClient{cc}
}

func (c *lendingServiceClient) CreateLending(ctx context.Context, in *CreateLendingRequest, opts ...grpc.CallOption) (*Lending, error) {
	out := new(Lending)
	err := c.cc.Invoke(ctx, "/lending.LendingService/CreateLending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lendingServiceClient) FetchLending(ctx context.Context, in *FetchLendingRequest, opts ...grpc.CallOption) (*FetchLendingResponse, error) {
	out := new(FetchLendingResponse)
	err := c.cc.Invoke(ctx, "/lending.LendingService/FetchLending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lendingServiceClient) RenewLending(ctx context.Context, in *RenewLendingRequest, opts ...grpc.CallOption) (*Lending, error) {
	out := new(Lending)
	err := c.cc.Invoke(ctx, "/lending.LendingService/RenewLending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lendingServiceClient) FinishLending(ctx context.Context, in *FinishLendingRequest, opts ...grpc.CallOption) (*Lending, error) {
	out := new(Lending)
	err := c.cc.Invoke(ctx, "/lending.LendingService/FinishLending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LendingServiceServer is the server API for LendingService service.
// All implementations must embed UnimplementedLendingServiceServer
// for forward compatibility
type LendingServiceServer interface {
	CreateLending(context.Context, *CreateLendingRequest) (*Lending, error)
	FetchLending(context.Context, *FetchLendingRequest) (*FetchLendingResponse, error)
	RenewLending(context.Context, *RenewLendingRequest) (*Lending, error)
	FinishLending(context.Context, *FinishLendingRequest) (*Lending, error)
	mustEmbedUnimplementedLendingServiceServer()
}

// UnimplementedLendingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLendingServiceServer struct {
}

func (UnimplementedLendingServiceServer) CreateLending(context.Context, *CreateLendingRequest) (*Lending, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLending not implemented")
}
func (UnimplementedLendingServiceServer) FetchLending(context.Context, *FetchLendingRequest) (*FetchLendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchLending not implemented")
}
func (UnimplementedLendingServiceServer) RenewLending(context.Context, *RenewLendingRequest) (*Lending, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewLending not implemented")
}
func (UnimplementedLendingServiceServer) FinishLending(context.Context, *FinishLendingRequest) (*Lending, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishLending not implemented")
}
func (UnimplementedLendingServiceServer) mustEmbedUnimplementedLendingServiceServer() {}

// UnsafeLendingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LendingServiceServer will
// result in compilation errors.
type UnsafeLendingServiceServer interface {
	mustEmbedUnimplementedLendingServiceServer()
}

func RegisterLendingServiceServer(s grpc.ServiceRegistrar, srv LendingServiceServer) {
	s.RegisterService(&LendingService_ServiceDesc, srv)
}

func _LendingService_CreateLending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LendingServiceServer).CreateLending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lending.LendingService/CreateLending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LendingServiceServer).CreateLending(ctx, req.(*CreateLendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LendingService_FetchLending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchLendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LendingServiceServer).FetchLending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lending.LendingService/FetchLending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LendingServiceServer).FetchLending(ctx, req.(*FetchLendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LendingService_RenewLending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewLendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LendingServiceServer).RenewLending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lending.LendingService/RenewLending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LendingServiceServer).RenewLending(ctx, req.(*RenewLendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LendingService_FinishLending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishLendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LendingServiceServer).FinishLending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lending.LendingService/FinishLending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LendingServiceServer).FinishLending(ctx, req.(*FinishLendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LendingService_ServiceDesc is the grpc.ServiceDesc for LendingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LendingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lending.LendingService",
	HandlerType: (*LendingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLending",
			Handler:    _LendingService_CreateLending_Handler,
		},
		{
			MethodName: "FetchLending",
			Handler:    _LendingService_FetchLending_Handler,
		},
		{
			MethodName: "RenewLending",
			Handler:    _LendingService_RenewLending_Handler,
		},
		{
			MethodName: "FinishLending",
			Handler:    _LendingService_FinishLending_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lending.proto",
}
