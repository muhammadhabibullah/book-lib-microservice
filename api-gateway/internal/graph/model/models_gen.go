// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Book struct {
	ID    string `json:"id"`
	Title string `json:"title"`
	Stock int    `json:"stock"`
}

type BookPaged struct {
	Books     []*Book `json:"books"`
	Page      int     `json:"page"`
	Limit     int     `json:"limit"`
	TotalBook int     `json:"totalBook"`
	LastPage  int     `json:"lastPage"`
}

type DeleteBook struct {
	ID string `json:"id"`
}

type DeleteUser struct {
	Email string `json:"email"`
}

type FetchBookFilter struct {
	Page  *int    `json:"page"`
	Limit *int    `json:"limit"`
	Title *string `json:"title"`
}

type FetchLendingRequest struct {
	Page   *int    `json:"page"`
	Limit  *int    `json:"limit"`
	UserID *string `json:"userID"`
	Status *string `json:"status"`
}

type FetchUserFilter struct {
	Page  *int    `json:"page"`
	Limit *int    `json:"limit"`
	Email *string `json:"email"`
	Role  *Role   `json:"role"`
}

type FinishLendingRequest struct {
	ID string `json:"id"`
}

type Lending struct {
	ID         string `json:"id"`
	BookID     string `json:"bookID"`
	UserID     string `json:"userID"`
	Status     string `json:"status"`
	ReturnDate string `json:"returnDate"`
}

type LendingPaged struct {
	Lendings     []*Lending `json:"lendings"`
	Page         int        `json:"page"`
	Limit        int        `json:"limit"`
	TotalLending int        `json:"totalLending"`
	LastPage     int        `json:"lastPage"`
}

type Login struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type MyLendingRequest struct {
	Page   *int    `json:"page"`
	Limit  *int    `json:"limit"`
	Status *string `json:"status"`
}

type NewBook struct {
	Title string `json:"title"`
	Stock int    `json:"stock"`
}

type NewLending struct {
	BookID string `json:"bookID"`
}

type NewUser struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type RenewLendingRequest struct {
	ID string `json:"id"`
}

type UpdateBook struct {
	ID    string `json:"id"`
	Title string `json:"title"`
}

type UpdateBookStock struct {
	ID          string `json:"id"`
	StockChange int    `json:"stockChange"`
}

type UpdateUser struct {
	ID    string `json:"id"`
	Email string `json:"email"`
}

type User struct {
	ID    string `json:"id"`
	Email string `json:"email"`
	Role  Role   `json:"role"`
}

type UserPaged struct {
	Users     []*User `json:"users"`
	Page      int     `json:"page"`
	Limit     int     `json:"limit"`
	TotalUser int     `json:"totalUser"`
	LastPage  int     `json:"lastPage"`
}

type Role string

const (
	RoleAdmin     Role = "admin"
	RoleLibrarian Role = "librarian"
	RoleMember    Role = "member"
)

var AllRole = []Role{
	RoleAdmin,
	RoleLibrarian,
	RoleMember,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleLibrarian, RoleMember:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
